/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { List } from "./List";
import { ListCountArgs } from "./ListCountArgs";
import { ListFindManyArgs } from "./ListFindManyArgs";
import { ListFindUniqueArgs } from "./ListFindUniqueArgs";
import { CreateListArgs } from "./CreateListArgs";
import { UpdateListArgs } from "./UpdateListArgs";
import { DeleteListArgs } from "./DeleteListArgs";
import { NoteFindManyArgs } from "../../note/base/NoteFindManyArgs";
import { Note } from "../../note/base/Note";
import { User } from "../../user/base/User";
import { ShareListInputDto } from "../ShareListInputDto";
import { ShareListOutputDto } from "../ShareListOutputDto";
import { ListService } from "../list.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => List)
export class ListResolverBase {
  constructor(
    protected readonly service: ListService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "List",
    action: "read",
    possession: "any",
  })
  async _listsMeta(
    @graphql.Args() args: ListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [List])
  @nestAccessControl.UseRoles({
    resource: "List",
    action: "read",
    possession: "any",
  })
  async lists(@graphql.Args() args: ListFindManyArgs): Promise<List[]> {
    return this.service.lists(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => List, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "List",
    action: "read",
    possession: "own",
  })
  async list(@graphql.Args() args: ListFindUniqueArgs): Promise<List | null> {
    const result = await this.service.list(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => List)
  @nestAccessControl.UseRoles({
    resource: "List",
    action: "create",
    possession: "any",
  })
  async createList(@graphql.Args() args: CreateListArgs): Promise<List> {
    return await this.service.createList({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => List)
  @nestAccessControl.UseRoles({
    resource: "List",
    action: "update",
    possession: "any",
  })
  async updateList(@graphql.Args() args: UpdateListArgs): Promise<List | null> {
    try {
      return await this.service.updateList({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => List)
  @nestAccessControl.UseRoles({
    resource: "List",
    action: "delete",
    possession: "any",
  })
  async deleteList(@graphql.Args() args: DeleteListArgs): Promise<List | null> {
    try {
      return await this.service.deleteList(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Note], { name: "notes" })
  @nestAccessControl.UseRoles({
    resource: "Note",
    action: "read",
    possession: "any",
  })
  async findNotes(
    @graphql.Parent() parent: List,
    @graphql.Args() args: NoteFindManyArgs
  ): Promise<Note[]> {
    const results = await this.service.findNotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: List): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShareListOutputDto)
  async ShareAListWithAnotherUser(
    @graphql.Args()
    args: ShareListInputDto
  ): Promise<ShareListOutputDto> {
    return this.service.ShareAListWithAnotherUser(args);
  }
}
